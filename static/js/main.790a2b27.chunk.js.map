{"version":3,"sources":["components/navBar.jsx","common/verticalBar.jsx","components/body.jsx","algorithms/utils.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","arraySize","onClickRandomizeArray","onChangeArraySize","onClickMergeSort","onClickQuickSort","onClickHeapSort","onClickBubbleSort","isRunning","id","type","className","onClick","disabled","min","max","step","value","onInput","VerticalBar","width","height","marginRight","status","color","style","borderLeft","Body","bars","length","map","bar","randomize","array","i","push","Math","floor","random","swapElements","j","aux","App","useState","size","setSize","setBars","running","setRunning","unsortedBars","ACC","useEffect","mergeSort","arr","l","r","delay","last","m","delay1","delay2","merge","n1","n2","L","R","k","lIndex","indexOf","rIndex","colorElements","splice","quickSort","low","high","console","log","pivot","partition","leftDelay","heapSort","n","heapify","largest","bubbleSort","elements","action","newArr","forEach","el","delayAnimation","setTimeout","delayRunning","prevRunning","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.790a2b27.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavBar = ({\n  arraySize,\n  onClickRandomizeArray,\n  onChangeArraySize,\n  onClickMergeSort,\n  onClickQuickSort,\n  onClickHeapSort,\n  onClickBubbleSort,\n  isRunning,\n}) => {\n  return (\n    <div id=\"navbar\">\n      <button\n        type=\"button\"\n        className=\"btn btn-outline-light randomize\"\n        onClick={onClickRandomizeArray}\n        disabled={isRunning}\n      >\n        Randomize Array\n      </button>\n      <div className=\"sliderContainer\">\n        <h5>Array Size: {arraySize}</h5>\n        <input\n          type=\"range\"\n          min=\"5\"\n          max=\"150\"\n          step=\"2\"\n          value={arraySize}\n          className={`slider ${!isRunning ? \"active\" : \"blocked\"}`}\n          onInput={onChangeArraySize}\n          disabled={isRunning}\n        />\n      </div>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary algorithm \"\n        onClick={onClickMergeSort}\n        disabled={isRunning}\n      >\n        Merge Sort\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-success algorithm\"\n        onClick={onClickQuickSort}\n        disabled={isRunning}\n      >\n        Quick Sort\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger algorithm\"\n        onClick={onClickHeapSort}\n        disabled={isRunning}\n      >\n        Heap Sort\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary algorithm\"\n        onClick={onClickBubbleSort}\n        disabled={isRunning}\n      >\n        Bubble Sort\n      </button>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nconst VerticalBar = ({ width, height, marginRight, status }) => {\n  const color = !status\n    ? \"gray\"\n    : status === \"eval\"\n    ? \"green\"\n    : status === \"swap\"\n    ? \"red\"\n    : status === \"pivot\"\n    ? \"yellow\"\n    : status === \"heapCheck\"\n    ? \"purple\"\n    : status === \"done\"\n    ? \"blue\"\n    : \"black\";\n\n  const style = {\n    borderLeft: `${width}px solid ${color}`,\n    height: `${height}px`,\n    marginRight: `${marginRight}px`,\n  };\n\n  return <div style={style} className=\"regular\"></div>;\n};\n\nexport default VerticalBar;\n","import React from \"react\";\nimport VerticalBar from \"../common/verticalBar\";\n\nconst Body = ({ bars }) => {\n  const width = 450 / bars.length;\n  const marginRight =\n    bars.length <= 5\n      ? 10\n      : bars.length <= 10\n      ? 8\n      : bars.length <= 15\n      ? 6\n      : bars.length <= 20\n      ? 4\n      : bars.length <= 50\n      ? 3.5\n      : bars.length <= 100\n      ? 3\n      : 2;\n  return (\n    <div className=\"tableContainer\">\n      {bars.map((bar) => (\n        <VerticalBar\n          key={bar.id}\n          height={bar.height}\n          width={width}\n          marginRight={marginRight}\n          status={bar.status ? bar.status : null}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Body;\n","// Randomize an array with a given size\nexport const randomize = (arraySize) => {\n  const array = [];\n\n  for (let i = 0; i < arraySize; i++)\n    array.push({\n      id: i,\n      height: Math.floor(Math.random() * 480) + 20,\n    });\n\n  return array;\n};\n\n// Swap elements of an array\nexport const swapElements = (array, i, j) => {\n  let aux = array[i];\n  array[i] = array[j];\n  array[j] = aux;\n};\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport NavBar from \"./components/navBar\";\nimport Body from \"./components/body\";\nimport { randomize, swapElements } from \"./algorithms/utils\";\nimport \"./App.css\";\n\nconst START_POINT = 78;\n\nfunction App() {\n  const [size, setSize] = useState(0);\n  const [bars, setBars] = useState([]);\n  const [running, setRunning] = useState(null);\n\n  //Array to operate in algorithms\n  const unsortedBars = bars.map((bar) => {\n    return { ...bar };\n  });\n\n  //Calculate delay between renders\n  const ACC =\n    size <= 10\n      ? 800\n      : size <= 25\n      ? 400\n      : size <= 50\n      ? 150\n      : size <= START_POINT\n      ? 25\n      : 0;\n\n  useEffect(() => {\n    setSize(START_POINT);\n    setRunning(false);\n  }, []);\n\n  useEffect(() => {\n    setBars(randomize(size));\n  }, [size]);\n\n  // Merge Sort\n  const handleMergeSort = () => {\n    setRunning(true);\n    const delay = mergeSort(\n      unsortedBars,\n      0,\n      unsortedBars.length - 1,\n      ACC,\n      true\n    );\n    delayRunning(delay);\n  };\n\n  const mergeSort = (arr, l, r, delay, last) => {\n    if (l < r) {\n      const m = Math.floor((l + r) / 2);\n\n      const delay1 = mergeSort(arr, l, m, delay, false);\n      const delay2 = mergeSort(arr, m + 1, r, delay1, false);\n\n      return merge(arr, l, m, r, delay2, last);\n    }\n    return delay;\n  };\n\n  const merge = (arr, l, m, r, delay, last) => {\n    const n1 = m - l + 1;\n    const n2 = r - m;\n\n    const L = [];\n    const R = [];\n    for (let i = 0; i < n1; i++) L[i] = arr[l + i];\n    for (let j = 0; j < n2; j++) R[j] = arr[m + 1 + j];\n\n    let i = 0,\n      j = 0;\n\n    let k = l;\n    while (i < n1 && j < n2) {\n      const lIndex = arr.indexOf(L[i]);\n      const rIndex = arr.indexOf(R[j]);\n      colorElements(arr, [lIndex, rIndex], delay, \"eval\");\n      delay += ACC;\n      if (L[i].height <= R[j].height) {\n        arr.splice(lIndex, 1);\n        arr.splice(k++, 0, L[i++]);\n      } else {\n        colorElements(arr, [lIndex, rIndex], delay, \"swap\");\n        delay += ACC;\n        arr.splice(rIndex, 1);\n        arr.splice(k++, 0, R[j++]);\n        colorElements(arr, [k - 1, k], delay, \"eval\");\n        delay += ACC;\n      }\n\n      if (last) {\n        arr[k - 1].status = \"done\";\n        colorElements(arr, [], delay);\n        delay += ACC;\n      }\n    }\n\n    while (i < n1) {\n      arr[k++] = L[i++];\n      if (last) {\n        arr[k - 1].status = \"done\";\n        colorElements(arr, [], delay);\n        delay += ACC;\n      }\n    }\n    while (j < n2) {\n      arr[k++] = R[j++];\n      if (last) {\n        arr[k - 1].status = \"done\";\n        colorElements(arr, [], delay);\n        delay += ACC;\n      }\n    }\n\n    return delay;\n  };\n\n  // Quick Sort\n  const handleQuickSort = () => {\n    setRunning(true);\n    const delay = quickSort(unsortedBars, 0, unsortedBars.length - 1, ACC);\n    delayRunning(delay);\n  };\n\n  const quickSort = (arr, low, high, delay) => {\n    if (low < high) {\n      console.log(delay);\n      const [pivot, partDelay] = partition(arr, low, high, delay);\n\n      const leftDelay = quickSort(arr, low, pivot - 1, partDelay);\n      return quickSort(arr, pivot + 1, high, leftDelay);\n    } else if (low < arr.length) {\n      arr[low].status = \"done\";\n      colorElements(arr, [], delay);\n      return delay + ACC;\n    }\n    return delay;\n  };\n\n  function partition(arr, low, high, delay) {\n    arr[high].status = \"pivot\";\n\n    const pivot = arr[high];\n    let i = low - 1;\n\n    for (let j = low; j <= high - 1; j++) {\n      colorElements(arr, [i + 1, j], delay, \"eval\");\n      delay += ACC;\n      if (arr[j].height < pivot.height) {\n        colorElements(arr, [i + 1, j], delay, \"swap\");\n        delay += ACC;\n        swapElements(arr, ++i, j);\n        colorElements(arr, [i, j], delay, \"eval\");\n        delay += ACC;\n      }\n    }\n\n    colorElements(arr, [i + 1, high], delay, \"swap\");\n    delay += ACC;\n    swapElements(arr, i + 1, high);\n    colorElements(arr, [i + 1, high], delay, \"eval\");\n    delay += ACC;\n    arr[i + 1].status = \"done\";\n    colorElements(arr, [], delay);\n    delay += ACC;\n    return [i + 1, delay];\n  }\n\n  // Heap Sort\n  const handleHeapSort = () => {\n    setRunning(true);\n    const delay = heapSort(unsortedBars, unsortedBars.length);\n    delayRunning(delay);\n  };\n\n  const heapSort = (arr, n) => {\n    let delay = ACC;\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n      delay = heapify(arr, n, i, delay);\n    }\n\n    for (let i = n - 1; i > 0; i--) {\n      colorElements(arr, [0, i], delay, \"swap\");\n      delay += ACC;\n      swapElements(arr, 0, i);\n      arr[i].status = \"done\";\n      colorElements(arr, [], delay);\n      delay += ACC;\n      delay = heapify(arr, i, 0, delay);\n    }\n    arr[0].status = \"done\";\n    colorElements(arr, [], delay);\n    return delay;\n  };\n\n  const heapify = (arr, n, i, delay) => {\n    let largest = i;\n    let l = 2 * i + 1;\n    let r = 2 * i + 2;\n\n    if (l < n) {\n      colorElements(arr, [l, largest], delay, \"heapCheck\");\n      delay += ACC;\n      if (arr[l].height > arr[largest].height) largest = l;\n    }\n\n    if (r < n) {\n      colorElements(arr, [r, largest], delay, \"heapCheck\");\n      delay += ACC;\n      if (arr[r].height > arr[largest].height) largest = r;\n    }\n\n    if (largest !== i) {\n      colorElements(arr, [i, largest], delay, \"swap\");\n      delay += ACC;\n      swapElements(arr, i, largest);\n      colorElements(arr, [i, largest], delay, \"eval\");\n      delay += ACC;\n      delay = heapify(arr, n, largest, delay);\n    }\n\n    return delay;\n  };\n\n  // Bubble Sort\n  const handleBubbleSort = () => {\n    setRunning(true);\n    const delay = bubbleSort(unsortedBars, unsortedBars.length, ACC);\n    delayRunning(delay);\n  };\n\n  const bubbleSort = (arr, n, delay) => {\n    if (n === 1) {\n      arr[0].status = \"done\";\n      colorElements(arr, [], delay);\n      return delay + ACC;\n    }\n\n    for (let i = 0; i < n - 1; i++) {\n      colorElements(arr, [i, i + 1], delay, \"eval\");\n      delay += ACC;\n      if (arr[i].height > arr[i + 1].height) {\n        colorElements(arr, [i, i + 1], delay, \"swap\");\n        delay += ACC;\n        swapElements(arr, i, i + 1);\n        colorElements(arr, [i, i + 1], delay, \"eval\");\n        delay += ACC;\n      }\n    }\n    arr[n - 1].status = \"done\";\n    colorElements(arr, [], delay);\n    delay += ACC;\n\n    return bubbleSort(arr, n - 1, delay);\n  };\n\n  const colorElements = (arr, elements, delay, action) => {\n    const newArr = arr.map((bar) => {\n      return { ...bar };\n    });\n    if (action) elements.forEach((el) => (newArr[el].status = action));\n    delayAnimation(newArr, delay);\n  };\n\n  const delayAnimation = (arr, delay) => {\n    setTimeout(() => {\n      setBars(arr);\n    }, delay);\n  };\n\n  const delayRunning = (delay) => {\n    setTimeout(() => {\n      setRunning((prevRunning) => !prevRunning);\n    }, delay);\n  };\n\n  return (\n    <Fragment>\n      <NavBar\n        arraySize={size}\n        onClickRandomizeArray={() => setBars(randomize(size))}\n        onChangeArraySize={(e) => setSize(e.target.value)}\n        onClickMergeSort={handleMergeSort}\n        onClickQuickSort={handleQuickSort}\n        onClickHeapSort={handleHeapSort}\n        onClickBubbleSort={handleBubbleSort}\n        isRunning={running}\n      />\n      <Body bars={bars} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}